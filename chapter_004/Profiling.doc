1)jmap 
a)Запустил команду jmap -histo <pid>.
Она показывает находящиеся в куче обьекты. К какому классу они относятся, их количество и объем.
Например объекты :
857:             1             16  ru.job4j.tracker.CreateAction
 858:             1             16  ru.job4j.tracker.DeleteAction
 859:             1             16  ru.job4j.tracker.Exit
 860:             1             16  ru.job4j.tracker.FindByIdAction
 861:             1             16  ru.job4j.tracker.FindByNameAction
 862:             1             16  ru.job4j.tracker.ReplaceAction
b)Команда jhsdb jmap --heap --pid <pid>.
Показывает конфигурацию heap:
Значения настроек при которых heap будет увеличиваться, уменьшаться, максимальный размер heap,
отношения размеров старого к новому поколению, размел областей survivor,размер Metaspace.
Можно посмотреть размер памяти в регионах, сколько используется, сколько свободно.
При запуске под heap выделилось 4mb, tenured generation использует 99%,New Generation (Eden + 1 Survivor Space)
использует 35%.
c)jmap -clstats <pid>.
Статистика загрузчика классов.
Количество загруженных классов 2132.
d)jmap -finalizerinfo <pid>.
Получение информации об объектах ожидающих удаления.
Пишет Экземпляры, ожидающие завершения, не найдены.
e)jmap -dump:live,format=b,file=<path> <pid>.
Создает дамп памяти. Путь указывается до файла с расширением .hprof

2)jstat
После ввода в консоль команды jstat -gc  <pid> 1s 10
Показана ставтистика работы памяти. Под регионы survivor выделено по 128мб на каждый, но они пустые.
Емость Eden 1088мб, из которых используется 446мб. Под старое поколение выделено 2752 мб и они полностью
используются. Под мета пространство выделено 6016мб используется 4990. объем областей сжатого пространства
640мб, используется 546. Количество проведенных малых сборок 9, общее время проведенных малых сборок 0.009с.
Количество полных сборок 6, общее время полных сборок 0.036с. Общее время всех сборок 0.045с.

3)jconsole
Вкладка Overview отображает обзорную информацию о виртуальной машине Java и отслеживаемых значениях.
Memory отображает информацию об использовании памяти.
Threads отображает информацию об использовании потоков.
Classes отображает информацию о загрузке классов.
VM: Displays отображает информацию о виртуальной машине Java.
MBeans отображает информацию о MBeans.
1)Memory
В окошке Heap Memory Usage график зависимости использования памяти. Можно пройтись по разным областям паняти и
посмотреть в какое время как она использовалась.
Показан выделенный обьем памяти и сколько сейчас используется, а также максимальный объем памяти который может быть выделен под
виртуальную машину. У меня. max 4Гб, т.е. 25% от общего объема оперативной памяти.
Edem Used 27Мб, Committed 70Мб, Max 1.1 Гб.
Survavor Used 0Мб, Committed 8.7Мб, Max 139Мб.
Tenured Used 3.9Мб, Committed 174Мб, Max 2.79 Гб.
Под Non-heap Гыув 17.7, Committed 20.9
На момент диагностики.
Показано количество больших и малых сборок. Малых 3, больших 10, последние я инициировал кнопкой Perform GC.
2)Threads по диаграмме видно, что число живых потоков равно 14, пиковое значение 17. Можно узнать информацию о 
каждом потоке. Например в потоке main видно запущенные методы main и init в классе StartUI.
3)Classes Общее количество загреженных классов 2846, загруженных в данный момент 2791, выгруженных 55.
4)VM Summary Сведена информация из предыдущих вкладок, плюс информация о вируальной машине имени и времени работы процесса.
Указано процессорное время израсходованное VM с момента запуска. Информация о JIT компиляторе и общее время компиляции.
Информация об операционной системе и оперативной памяти. Далее идет информация об входных аргументах VM, пути для загрузки классов и библиотек.


Касательно выхода за пределы памяти. Я ограничил heap 1Гб и в цикле стал создавать 1ккк объектов Item. График Heap Memory Usage вскочил 
практически вертикально вверх. Начались малый чистки числом 4, затем 26 полных и после этого программа упала с java.lang.OutOfMemoryError:
Java heap space и Jconsole потеряла соединение. Места в heap уже не было, а чистки память не освобождали, потому как все объекты были достижимы.